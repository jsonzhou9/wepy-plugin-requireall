{"version":3,"sources":["../src/index.js"],"names":["c","def","src","dist","sourceMap","filter","RegExp","rule","setting","Object","assign","op","distRelativePath","relative","process","cwd","file","sourceFile","join","substring","length","test","next","fileContent","readFile","error","res","match","$BuildRequireAllStr","replace","buildArgs","map","item","spath","parse","modulesShortPath","modulesSourcePath","dir","fileList","readdirSync","modulesFileType","startsWith","stat","lstatSync","isDirectory","exportArr","importArr","forEach","index","arr","moduleName","indexOf","modulePath","push","es6Code","output","action","code","transformEs5","name","fileName","compileResult","require","transform","presets","plugins","e","sources","Base64","encode","JSON","stringify","readFileSync","err"],"mappings":"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","file":"index.js","sourcesContent":["import path from 'path';\nimport fs from 'fs';\n\nexport default class {\n\n    constructor(c = {}) {\n        const def = {\n            src: 'src', //源文件目录\n            dist: 'dist', //目标文件目录\n            sourceMap: true,\n            filter: new RegExp('\\w$'),\n            rule: RegExp('\\\\$BuildRequireAll\\\\(.+\\\\)')\n        };\n\n        this.setting = Object.assign({}, def, c);\n    }\n\n    apply (op) {\n\n        let setting = this.setting;\n\n        //获取源路径\n        let distRelativePath = path.relative(process.cwd(), op.file); //目标文件相对路径\n        let sourceFile = path.join(this.setting.src, distRelativePath.substring(this.setting.dist.length)); //对应的源文件路径\n\n        if (!setting.filter.test(sourceFile)) {\n            op.next();\n            return;\n        }\n\n        let fileContent = this.readFile(sourceFile,op.error);\n        if(!setting.rule.test(fileContent)){\n            op.next();\n            return;\n        }\n\n        //仅查找当前文件中第一个匹配的$BuildRequireAll方法\n        let res = fileContent.match(setting.rule);\n        if(!res || !res.length){\n            op.next();\n            return;\n        }\n\n        let $BuildRequireAllStr = res[0];\n        $BuildRequireAllStr = $BuildRequireAllStr.replace(/\\'/gi,'\"'); //参数统一转为双引号\n        let buildArgs = $BuildRequireAllStr.match(/\\\"[^\\\"]+\\\"/gi); //提取参数，结果带有双引号\n        if(!buildArgs || !buildArgs.length){ //参数为空，不合法\n            op.next();\n            return;\n        }\n\n        buildArgs = buildArgs.map((item) => item.replace(/\"/gi,'')); //去除参数的双引号\n        let spath = path.parse(sourceFile); //源路径\n        let modulesShortPath = buildArgs[0];\n        let modulesSourcePath = path.join(spath.dir, modulesShortPath);\n\n        //读取子模块文件列表，并对文件类型及目录类型进行过滤\n        let fileList = fs.readdirSync(modulesSourcePath);\n        let modulesFileType = null;\n        if(buildArgs.length===2){\n            modulesFileType = buildArgs[1].startsWith('.') ? buildArgs[1] : '.'+buildArgs[1];\n        }\n        fileList = fileList.filter(function(file) {\n            let stat = fs.lstatSync(path.join(modulesSourcePath,file));\n            if(modulesFileType){\n                return !stat.isDirectory();\n            }else{\n                return !stat.isDirectory() && new RegExp(modulesFileType+'$').test(file);\n            }\n        });\n\n        let exportArr = [],importArr = [];\n        fileList.forEach(function(file, index, arr){\n            let moduleName = file.substring(0,file.indexOf('.'));\n            let modulePath = modulesShortPath+'/'+file;\n            importArr.push(\"import \"+moduleName+\" from '\"+modulePath+\"'\");\n            exportArr.push(moduleName);\n        });\n        let es6Code = importArr.join(';') + ';export {' + exportArr.join(',') + '}';\n\n        op.output && op.output({\n            action: '批量导入模块',\n            file: op.file\n        });\n\n        let code = this.transformEs5(es6Code,spath.name);\n        op.code = code;\n\n        op.next();\n    }\n\n    transformEs5 (es6Code,fileName) {\n        let compileResult = null;\n        let code = es6Code;\n        try{\n            compileResult = require(\"babel-core\").transform(es6Code, {\n                sourceMap: this.setting.sourceMap,\n                presets: [\"env\"],\n                plugins: [\n                    'transform-export-extensions'\n                ]\n            });\n        }catch (e){\n        }\n\n        if(compileResult && compileResult.code){\n            code = compileResult.code;\n            let sourceMap = compileResult.map;\n            if (sourceMap) {\n                sourceMap.sources = [fileName];\n                sourceMap.file = fileName;\n                let Base64 = require('js-base64').Base64;\n                code += `\\r\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,${Base64.encode(JSON.stringify(sourceMap))}`;\n            }\n        }\n        return code;\n    }\n\n    readFile (file,error) {\n        let fileContent = '';\n        try{\n            fileContent = fs.readFileSync(file,'utf8');\n        }catch(e) {\n            error && error({err:'文件读取出错',file:file})\n        }\n        return fileContent;\n    }\n}"]}